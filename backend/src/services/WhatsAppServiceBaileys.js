const { 
    default: makeWASocket, 
    DisconnectReason, 
    useMultiFileAuthState,
    fetchLatestBaileysVersion 
} = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const EventEmitter = require('events');
const path = require('path');
const fs = require('fs');

class WhatsAppServiceBaileys extends EventEmitter {
    constructor(userId = null) {
        super();
        this.sock = null;
        this.isReady = false;
        this.userId = userId;
        this.qrCode = null;
        this.isInitializing = false; // Prevenir m√∫ltiples inicializaciones
        this.isSending = false; // Para deshabilitar reconexiones durante env√≠o
        this.authState = null;
        this.saveCreds = null;
    }

    async initialize(forceNew = false) {
        try {
            // Prevenir m√∫ltiples inicializaciones simult√°neas
            if (this.isInitializing) {
                console.log(`‚ö†Ô∏è Ya hay una inicializaci√≥n en progreso para usuario ${this.userId}`);
                return;
            }
            
            this.isInitializing = true;
            
            // Si ya hay un socket activo y no forzamos nueva sesi√≥n, no hacer nada
            if (this.sock && !forceNew) {
                console.log(`‚ÑπÔ∏è Cliente ya conectado para usuario ${this.userId}`);
                this.isInitializing = false;
                return;
            }

            // Cerrar socket existente si existe
            if (this.sock) {
                try {
                    await this.sock.logout();
                } catch (error) {
                    console.log(`‚ö†Ô∏è Error al cerrar socket anterior: ${error.message}`);
                }
                this.sock = null;
            }
            
            const cleanUserId = this.userId ? String(this.userId).replace(/[^a-zA-Z0-9_-]/g, '') : 'default';
            console.log(`üöÄ Inicializando Baileys para usuario ${this.userId} (ID: ${cleanUserId})`);
            
            // Configurar sesi√≥n independiente por usuario
            const sessionPath = this.userId ? 
                path.join(__dirname, '../..', 'baileys_sessions', `session_${cleanUserId}`) :
                path.join(__dirname, '../..', 'baileys_sessions', 'default');

            // Si forceNew es true, eliminar sesi√≥n existente para forzar QR
            if (forceNew && fs.existsSync(sessionPath)) {
                console.log(`üîÑ Forzando nueva sesi√≥n - eliminando credenciales existentes...`);
                fs.rmSync(sessionPath, { recursive: true, force: true });
            }

            // Crear directorio si no existe
            if (!fs.existsSync(sessionPath)) {
                fs.mkdirSync(sessionPath, { recursive: true });
            }

            // Configurar autenticaci√≥n multi-archivo
            const { state, saveCreds } = await useMultiFileAuthState(sessionPath);
            this.authState = state;
            this.saveCreds = saveCreds;

            // Obtener la √∫ltima versi√≥n de Baileys
            const { version, isLatest } = await fetchLatestBaileysVersion();
            console.log(`üì± Usando versi√≥n de WhatsApp: ${version.join('.')}, es la √∫ltima: ${isLatest}`);

            // Crear logger compatible con Baileys
            const logger = {
                level: 'warn',
                child: (bindings) => logger,
                trace: () => {},
                debug: () => {},
                info: () => {},
                warn: console.warn,
                error: console.error,
                fatal: console.error
            };

            // Crear socket de conexi√≥n con configuraci√≥n optimizada para conexiones lentas
            this.sock = makeWASocket({
                version,
                auth: this.authState,
                printQRInTerminal: false,
                defaultQueryTimeoutMs: 60000, // Aumentado para conexiones lentas
                keepAliveIntervalMs: 30000,   // M√°s tolerante
                logger: logger,
                browser: ['Bot WhatsApp', 'Desktop', '1.0.0'],
                retryRequestDelayMs: 250,     // Delay entre reintentos
                maxMsgRetryCount: 5,          // M√°s reintentos para mensajes
                // Configuraci√≥n adicional para estabilidad
                emitOwnEvents: true,
                markOnlineOnConnect: false,   // No marcar online autom√°ticamente 
                syncFullHistory: false,       // No sincronizar historial completo
                generateHighQualityLinkPreview: false,
                shouldSyncHistoryMessage: () => false, // No sincronizar historial
                shouldIgnoreJid: () => false,
                fireInitQueries: true,       // Inicializar queries inmediatamente
                getMessage: async (key) => {
                    return { conversation: 'Message not found' };
                }
            });

            // Event listeners
            this.sock.ev.on('connection.update', async (update) => {
                const { connection, lastDisconnect, qr } = update;
                
                console.log(`üîÑ Connection update para usuario ${this.userId}: connection=${connection}, qr=${!!qr}`);
                
                if (qr) {
                    console.log(`üì± QR Code generado para usuario ${this.userId || 'default'}`);
                    this.qrCode = qr;
                    this.emit('qr', qr);
                }
                
                // üîç Detectar cuando el QR se escanea (qr desaparece pero connection no es 'open' a√∫n)
                if (!qr && this.qrCode && connection !== 'open' && connection !== 'close') {
                    console.log(`üîÑ QR escaneado para usuario ${this.userId} - procesando conexi√≥n...`);
                    this.qrCode = null;
                    this.emit('qr_scanned');
                }

                if (connection === 'close') {
                    const statusCode = lastDisconnect?.error?.output?.statusCode;
                    console.log(`‚ùå Conexi√≥n cerrada para usuario ${this.userId || 'default'}`);
                    console.log(`   C√≥digo: ${statusCode}, Raz√≥n: ${lastDisconnect?.error?.message}`);
                    
                    this.isReady = false;
                    this.emit('disconnected', lastDisconnect?.error?.message || 'Conexi√≥n cerrada');
                    
                    // Para c√≥digo 401 (no autorizado), solo limpiar credenciales SIN reiniciar autom√°ticamente
                    if (statusCode === 401 || statusCode === DisconnectReason.badSession) {
                        console.log(`üîÑ C√≥digo 401 detectado - limpiando credenciales...`);
                        setTimeout(async () => {
                            try {
                                // Eliminar credenciales solamente
                                const cleanUserId = this.userId ? String(this.userId).replace(/[^a-zA-Z0-9_-]/g, '') : 'default';
                                const sessionPath = this.userId ? 
                                    path.join(__dirname, '../..', 'baileys_sessions', `session_${cleanUserId}`) :
                                    path.join(__dirname, '../..', 'baileys_sessions', 'default');
                                
                                if (fs.existsSync(sessionPath)) {
                                    fs.rmSync(sessionPath, { recursive: true, force: true });
                                    console.log(`üóëÔ∏è Credenciales eliminadas - usuario debe reconectar manualmente`);
                                }
                                
                                // NO reinicializar autom√°ticamente, dejar que el usuario presione "Conectar"
                                
                            } catch (error) {
                                console.log(`‚ùå Error limpiando credenciales: ${error.message}`);
                            }
                        }, 1000);
                    }
                    // Para otros errores, NO hacer reintentos autom√°ticos que interfieren con la conexi√≥n
                    else if (statusCode === DisconnectReason.loggedOut) {
                        console.log(`üö™ Usuario cerr√≥ sesi√≥n manualmente - no reintentando`);
                    } else if (statusCode === DisconnectReason.restartRequired) {
                        console.log(`üîÑ WhatsApp requiere reinicio - usuario debe reconectar manualmente`);
                    } else if (this.isSending) {
                        console.log(`‚è∏Ô∏è No reconectando durante env√≠o masivo para usuario ${this.userId}`);
                    } else {
                        console.log(`‚ùå Conexi√≥n cerrada (c√≥digo ${statusCode}) - esperando reconexi√≥n manual`);
                    }
                } else if (connection === 'connecting') {
                    console.log(`üîÑ Conectando WhatsApp para usuario ${this.userId || 'default'}...`);
                    // ÔøΩ NO agregar timeout aqu√≠ - dejar que WhatsApp maneje su propio timing
                    
                } else if (connection === 'open') {
                    console.log(`üéâ WhatsApp conectado exitosamente para usuario ${this.userId || 'default'}`);
                    
                    // Limpiar cualquier timeout existente
                    if (this.connectionTimeout) {
                        clearTimeout(this.connectionTimeout);
                        this.connectionTimeout = null;
                    }
                    
                    // Obtener informaci√≥n del usuario
                    try {
                        const userInfo = this.sock.user;
                        if (userInfo) {
                            console.log(`üìû N√∫mero conectado: ${userInfo.id.split(':')[0]}`);
                            console.log(`üë§ Nombre: ${userInfo.name || 'Sin nombre'}`);
                        }
                    } catch (error) {
                        console.log('‚ö†Ô∏è No se pudo obtener informaci√≥n del usuario:', error.message);
                    }
                    
                    this.isReady = true;
                    this.qrCode = null;
                    this.emit('ready');
                    console.log(`‚úÖ Cliente Baileys listo para usuario ${this.userId || 'default'}`);
                }
            });

            // Guardar credenciales cuando cambien
            this.sock.ev.on('creds.update', this.saveCreds);

            // Manejar actualizaciones de mensajes
            this.sock.ev.on('messages.upsert', async ({ messages, type }) => {
                // Solo procesar mensajes nuevos
                if (type === 'notify') {
                    for (const message of messages) {
                        if (!message.key.fromMe) {
                            // Aqu√≠ se pueden manejar mensajes entrantes si es necesario
                            console.log(`üì® Mensaje recibido de ${message.key.remoteJid}`);
                        }
                    }
                }
            });

            this.isInitializing = false; // Marcar como completado

        } catch (error) {
            this.isInitializing = false; // Limpiar flag en caso de error
            console.error(`‚ùå Error al inicializar Baileys para usuario ${this.userId || 'default'}:`, error);
            throw error;
        }
    }

    // Funci√≥n para generar emoji aleatorio
    getRandomEmoji() {
        const emojis = [
            'üòä', 'üåü', '‚ú®', 'üí´', 'üéâ', 'üéä', 'üéà','üçÄ',
            '‚òÄÔ∏è', '‚≠ê', 'üíé', 'üéØ', 
            'üèÜ', 'üéñÔ∏è', 'üèÖ', 'üéÅ', 'üî•','‚ö°','ü•≥', 'üòÑ', 'üòÉ', 'üòÄ', 'üòÅ', 'ü§©',
            'üôÇ', 'üòå', 'üòã', 'üòé', 'ü§ó', 'ü§≠', 'üí™', 'üëè', 'üôå', 'üëç',
            '‚úåÔ∏è', 'ü§û', 'ü§ü', 'üëå', 'ü§ò','üíØ', '‚úÖ'
        ];
        return emojis[Math.floor(Math.random() * emojis.length)];
    }

    // Funci√≥n para personalizar mensaje - SIMPLIFICADO: solo emoji
    personalizeMessage(baseMessage, contactName) {
        const emoji = this.getRandomEmoji();
        return `${emoji} ${baseMessage}`;
    }

    // Resolver JID (ID de chat) para Baileys
    resolveJid(phoneNumber) {
        const cleaned = phoneNumber.replace(/\D/g, '');
        
        // Detectar autom√°ticamente el pa√≠s basado en la longitud
        let intl = cleaned;
        if (intl.length === 9) {
            intl = '51' + intl; // Per√∫
            console.log(`üáµüá™ N√∫mero peruano detectado: ${phoneNumber} -> ${intl}`);
        } else if (intl.length === 10) {
            intl = '52' + intl; // M√©xico
            console.log(`üá≤üáΩ N√∫mero mexicano detectado: ${phoneNumber} -> ${intl}`);
        }
        
        const jid = `${intl}@s.whatsapp.net`;
        console.log(`üì± JID generado: ${phoneNumber} -> ${jid}`);
        return jid;
    }

    async sendBulkMessages(contacts, message) {
        if (!this.isReady || !this.sock) {
            throw new Error('WhatsApp no est√° conectado');
        }

        // üõ°Ô∏è Activar flag de env√≠o para prevenir reconexiones
        this.isSending = true;
        console.log('üîí Modo env√≠o activado - Reconexiones deshabilitadas');

        console.log(`üöÄ Iniciando env√≠o masivo con Baileys a ${contacts.length} contactos`);
        const results = [];
        
        try {
            for (let i = 0; i < contacts.length; i++) {
                const contact = contacts[i];
                
                try {
                    // Verificar que el socket sigue activo
                    if (!this.sock || !this.isReady) {
                        throw new Error('Socket WhatsApp desconectado');
                    }

                    // Resolver JID del contacto
                    const jid = this.resolveJid(contact.number);

                    // Verificar si el n√∫mero est√° registrado en WhatsApp
                    try {
                        const [result] = await this.sock.onWhatsApp(jid);
                        if (!result?.exists) {
                            console.log(`‚ùå N√∫mero no registrado en WhatsApp: ${contact.number}`);
                            results.push({
                                contact: contact.name,
                                number: contact.number,
                                success: false,
                                error: 'N√∫mero no registrado en WhatsApp'
                            });
                            continue;
                        }
                        console.log(`‚úÖ N√∫mero verificado en WhatsApp: ${contact.number}`);
                    } catch (verifyError) {
                        console.log(`‚ö†Ô∏è No se pudo verificar el n√∫mero ${contact.number}, continuando...`);
                    }

                    // Personalizar mensaje
                    const personalizedMessage = this.personalizeMessage(message, contact.name);

                    // Enviar mensaje con reintentos
                    let messageSent = false;
                    let retries = 3;
                    
                    while (retries > 0 && !messageSent) {
                        try {
                            await this.sock.sendMessage(jid, { text: personalizedMessage });
                            messageSent = true;
                            console.log(`‚úÖ Mensaje enviado a ${contact.name} (${contact.number}): "${personalizedMessage.substring(0, 50)}${personalizedMessage.length > 50 ? '...' : ''}"`);
                            
                        } catch (sendError) {
                            retries--;
                            console.log(`‚ùå Error enviando mensaje a ${contact.number} (${retries} intentos restantes):`, sendError.message);
                            
                            if (retries > 0) {
                                await new Promise(resolve => setTimeout(resolve, 3000));
                            } else {
                                throw sendError;
                            }
                        }
                    }
                    
                    results.push({
                        contact: contact.name,
                        number: contact.number,
                        success: true,
                        timestamp: new Date(),
                        sentMessage: personalizedMessage
                    });

                    // Delay inteligente entre mensajes
                    if (i < contacts.length - 1) {
                        await this.intelligentDelay(i, contacts.length);
                    }

                } catch (error) {
                    console.error(`‚ùå Error enviando a ${contact.name} (${contact.number}):`, error.message);
                    results.push({
                        contact: contact.name,
                        number: contact.number,
                        success: false,
                        error: error.message
                    });
                    
                    // Si es un error de conexi√≥n cr√≠tico, parar el env√≠o
                    if (error.message.includes('Connection Closed') || 
                        error.message.includes('desconectado')) {
                        console.error('üö® Socket WhatsApp cerrado inesperadamente. Deteniendo env√≠o.');
                        break;
                    }
                }
            }

            console.log(`üéØ Env√≠o masivo completado: ${results.filter(r => r.success).length}/${results.length} mensajes exitosos`);
            
            // ‚ö° SEGURIDAD: Cerrar SOLO la sesi√≥n de WhatsApp, NO la sesi√≥n del usuario web
            console.log('üîí Programando cierre autom√°tico de la sesi√≥n de WhatsApp por seguridad...');
            console.log('‚ÑπÔ∏è NOTA: Solo se cerrar√° WhatsApp, la sesi√≥n web del usuario permanece activa');
            setTimeout(async () => {
                try {
                    console.log('üîê Cerrando sesi√≥n de WhatsApp autom√°ticamente (usuario web sigue activo)...');
                    await this.destroy();
                    console.log('‚úÖ Sesi√≥n de WhatsApp cerrada autom√°ticamente - Usuario web sigue conectado');
                } catch (error) {
                    console.log('‚ö†Ô∏è Error cerrando sesi√≥n autom√°tica de WhatsApp:', error.message);
                }
            }, 5000); // Esperar 5 segundos para asegurar que los mensajes se enviaron

            return results;
            
        } catch (error) {
            console.error('üö® Error cr√≠tico en env√≠o masivo:', error.message);
            throw error;
        } finally {
            // üõ°Ô∏è Siempre desactivar flag de env√≠o al finalizar
            this.isSending = false;
            console.log('üîì Modo env√≠o desactivado - Reconexiones rehabilitadas (finally)');
        }
    }

    async intelligentDelay(currentIndex, totalMessages) {
        let delay;
        
        // Delays m√°s largos cada ciertos mensajes
        if ((currentIndex + 1) % 50 === 0) {
            delay = 300000; // 5 minutos cada 50 mensajes
        } else if ((currentIndex + 1) % 25 === 0) {
            delay = 120000; // 2 minutos cada 25 mensajes
        } else if ((currentIndex + 1) % 10 === 0) {
            delay = 60000; // 1 minuto cada 10 mensajes
        } else {
            // Delay aleatorio entre 8-15 segundos
            delay = Math.floor(Math.random() * 7000) + 8000;
        }

        console.log(`‚è∞ Esperando ${delay/1000} segundos antes del siguiente mensaje...`);
        await new Promise(resolve => setTimeout(resolve, delay));
    }

    async getContacts() {
        if (!this.isReady || !this.sock) {
            throw new Error('WhatsApp no est√° conectado');
        }

        try {
            // En Baileys, necesitamos obtener los contactos del store
            const contacts = Object.values(this.sock.store?.contacts || {});
            return contacts.map(contact => ({
                id: contact.id,
                name: contact.name || contact.notify || 'Sin nombre',
                number: contact.id.split('@')[0]
            }));
        } catch (error) {
            console.error('Error al obtener contactos:', error);
            throw error;
        }
    }

    async destroy() {
        try {
            if (this.sock) {
                console.log(`üîå Cerrando conexi√≥n de WhatsApp para usuario ${this.userId || 'default'}...`);
                console.log(`‚ÑπÔ∏è NOTA: Solo se cierra WhatsApp, la sesi√≥n web del usuario permanece activa`);
                
                this.isReady = false;
                this.emit('disconnected', 'Manually disconnected');
                
                // Cerrar socket de WhatsApp
                try {
                    await this.sock.logout();
                    console.log('üì§ Logout de WhatsApp exitoso');
                } catch (logoutError) {
                    console.log('‚ö†Ô∏è Logout de WhatsApp error (ignorado):', logoutError.message);
                }
                
                this.sock = null;
                console.log('‚úÖ Socket de WhatsApp cerrado correctamente - Usuario web sigue activo');
            }
        } catch (error) {
            console.error('‚ùå Error al destruir socket de WhatsApp:', error.message);
            this.sock = null;
            this.isReady = false;
        }
    }

    getConnectionState() {
        return {
            isReady: this.isReady,
            client: !!this.sock,
            userId: this.userId,
            qrCode: this.qrCode
        };
    }

    clearUserCredentials(userId) {
        return new Promise((resolve) => {
            try {
                const cleanUserId = String(userId || this.userId).replace(/[^a-zA-Z0-9_-]/g, '');
                const sessionPath = path.join(__dirname, '../..', 'baileys_sessions', `session_${cleanUserId}`);
                
                if (fs.existsSync(sessionPath)) {
                    fs.rmSync(sessionPath, { recursive: true, force: true });
                    console.log(`üóëÔ∏è Credenciales eliminadas para usuario ${userId || this.userId}`);
                } else {
                    console.log(`‚ÑπÔ∏è No hab√≠a credenciales para limpiar para usuario ${userId || this.userId}`);
                }
                
                resolve(true);
            } catch (error) {
                console.error(`‚ùå Error limpiando credenciales para usuario ${userId || this.userId}:`, error);
                resolve(false);
            }
        });
    }
}

module.exports = WhatsAppServiceBaileys;
